//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Products_Management_System.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
    
        public virtual int DeleteProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", productIDParameter);
        }
    
        public virtual int DeleteSupplier(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSupplier", supplierIDParameter);
        }
    
        public virtual int InsertProduct(string productName, string quantityPerUnit, Nullable<int> reorderLevel, Nullable<int> supplierID, Nullable<decimal> unitPrice, Nullable<int> unitsInStock, Nullable<int> unitsOnOrder)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var quantityPerUnitParameter = quantityPerUnit != null ?
                new ObjectParameter("QuantityPerUnit", quantityPerUnit) :
                new ObjectParameter("QuantityPerUnit", typeof(string));
    
            var reorderLevelParameter = reorderLevel.HasValue ?
                new ObjectParameter("ReorderLevel", reorderLevel) :
                new ObjectParameter("ReorderLevel", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitsInStockParameter = unitsInStock.HasValue ?
                new ObjectParameter("UnitsInStock", unitsInStock) :
                new ObjectParameter("UnitsInStock", typeof(int));
    
            var unitsOnOrderParameter = unitsOnOrder.HasValue ?
                new ObjectParameter("UnitsOnOrder", unitsOnOrder) :
                new ObjectParameter("UnitsOnOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", productNameParameter, quantityPerUnitParameter, reorderLevelParameter, supplierIDParameter, unitPriceParameter, unitsInStockParameter, unitsOnOrderParameter);
        }
    
        public virtual int InsertSupplier(string supplierName)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplier", supplierNameParameter);
        }
    
        public virtual int MakeOrder(Nullable<int> productID, string customerName, Nullable<int> unitsOrdered)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var unitsOrderedParameter = unitsOrdered.HasValue ?
                new ObjectParameter("UnitsOrdered", unitsOrdered) :
                new ObjectParameter("UnitsOrdered", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeOrder", productIDParameter, customerNameParameter, unitsOrderedParameter);
        }
    
        public virtual ObjectResult<SelectAllOrders_Result> SelectAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllOrders_Result>("SelectAllOrders");
        }
    
        public virtual ObjectResult<SelectAllProducts_Result> SelectAllProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllProducts_Result>("SelectAllProducts");
        }
    
        public virtual ObjectResult<SelectAllProductsNeedsReOrder_Result> SelectAllProductsNeedsReOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllProductsNeedsReOrder_Result>("SelectAllProductsNeedsReOrder");
        }
    
        public virtual ObjectResult<SelectAllSuppliers_Result> SelectAllSuppliers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllSuppliers_Result>("SelectAllSuppliers");
        }
    
        public virtual ObjectResult<SelectLargestSupplier_Result> SelectLargestSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectLargestSupplier_Result>("SelectLargestSupplier");
        }
    
        public virtual ObjectResult<SelectProductsCanBeBought_Result> SelectProductsCanBeBought()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductsCanBeBought_Result>("SelectProductsCanBeBought");
        }
    
        public virtual ObjectResult<SelectProductWithMinimumOrder_Result> SelectProductWithMinimumOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductWithMinimumOrder_Result>("SelectProductWithMinimumOrder");
        }
    
        public virtual ObjectResult<SelectSomeOrders_Result> SelectSomeOrders(string searchParam)
        {
            var searchParamParameter = searchParam != null ?
                new ObjectParameter("SearchParam", searchParam) :
                new ObjectParameter("SearchParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSomeOrders_Result>("SelectSomeOrders", searchParamParameter);
        }
    
        public virtual ObjectResult<SelectSomeProducts_Result> SelectSomeProducts(string searchParam)
        {
            var searchParamParameter = searchParam != null ?
                new ObjectParameter("SearchParam", searchParam) :
                new ObjectParameter("SearchParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSomeProducts_Result>("SelectSomeProducts", searchParamParameter);
        }
    
        public virtual ObjectResult<SelectSomeSuppliers_Result> SelectSomeSuppliers(string searchParam)
        {
            var searchParamParameter = searchParam != null ?
                new ObjectParameter("SearchParam", searchParam) :
                new ObjectParameter("SearchParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSomeSuppliers_Result>("SelectSomeSuppliers", searchParamParameter);
        }
    
        public virtual int UpdateProduct(Nullable<int> productID, string productName, string quantityPerUnit, Nullable<int> reorderLevel, Nullable<int> supplierID, Nullable<decimal> unitPrice, Nullable<int> unitsInStock, Nullable<int> unitsOnOrder)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var quantityPerUnitParameter = quantityPerUnit != null ?
                new ObjectParameter("QuantityPerUnit", quantityPerUnit) :
                new ObjectParameter("QuantityPerUnit", typeof(string));
    
            var reorderLevelParameter = reorderLevel.HasValue ?
                new ObjectParameter("ReorderLevel", reorderLevel) :
                new ObjectParameter("ReorderLevel", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitsInStockParameter = unitsInStock.HasValue ?
                new ObjectParameter("UnitsInStock", unitsInStock) :
                new ObjectParameter("UnitsInStock", typeof(int));
    
            var unitsOnOrderParameter = unitsOnOrder.HasValue ?
                new ObjectParameter("UnitsOnOrder", unitsOnOrder) :
                new ObjectParameter("UnitsOnOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduct", productIDParameter, productNameParameter, quantityPerUnitParameter, reorderLevelParameter, supplierIDParameter, unitPriceParameter, unitsInStockParameter, unitsOnOrderParameter);
        }
    
        public virtual int UpdateSupplier(Nullable<int> supplierID, string supplierName)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSupplier", supplierIDParameter, supplierNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetProductStock(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetProductStock", productIDParameter);
        }
    }
}
